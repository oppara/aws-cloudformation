AWSTemplateFormatVersion: 2010-09-09
Description:
  Create Vpc, Subnet and NatGateway

#---------------------------------------------------------------------------
Metadata:
#---------------------------------------------------------------------------
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Parameters:
          - SystemName
          - VpcCidr
          - EnableNatGateway

#---------------------------------------------------------------------------
Parameters:
#---------------------------------------------------------------------------
  SystemName:
    Description: Resource Prefix. e.g. example, example-dev, example-stg, example-prd
    Type: String
    MinLength: 1
    Default: example
  VpcCidr:
    Description: First and Second Octet of VPC. e.g. 10.0, 172.16, 192.168
    Type: String
    Default: 10.0
    AllowedPattern: "^(10\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\.(1[6-9]|2[0-9]|3[0-1])|192\\.168)$"
    ConstraintDescription: xxx.xxx
  EnableNatGateway:
    Description: Enable NAT Gateway?
    Type: String
    Default: false
    AllowedValues: [true, false]

#------------------------------------------------------------------------------
Conditions:
#------------------------------------------------------------------------------
  EnableNatGateway:
    !Equals [true, !Ref EnableNatGateway]

#---------------------------------------------------------------------------
Mappings:
#---------------------------------------------------------------------------
  CidrConfig:
    Key:
      Vpc: .0.0/16
      PublicSubnet1: .0.0/24
      PublicSubnet2: .1.0/24
      PublicSubnet3: .2.0/24
      ApplicationSubnet1: .10.0/24
      ApplicationSubnet2: .11.0/24
      ApplicationSubnet3: .12.0/24
      DataStoreSubnet1: .20.0/24
      DataStoreSubnet2: .21.0/24
      DataStoreSubnet3: .22.0/24

#---------------------------------------------------------------------------
Resources:
#---------------------------------------------------------------------------

  #---------------------------------------------------------------------------
  Vpc:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ CidrConfig, Key, Vpc ]}]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-vpc
        - Key: SystemName
          Value: !Sub ${SystemName}

  #---------------------------------------------------------------------------
  InternetGateway:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-igw
        - Key: SystemName
          Value: !Sub ${SystemName}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  #---------------------------------------------------------------------------
  NetworkACL:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-nacl
        - Key: SystemName
          Value: !Sub ${SystemName}
      VpcId: !Ref Vpc

  NetworkACLEntryEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  NetworkACLEntryIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  #---------------------------------------------------------------------------
  PublicRouteTable:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-public-rtb
        - Key: SystemName
          Value: !Sub ${SystemName}
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #---------------------------------------------------------------------------
  PublicSubnet1:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ CidrConfig, Key, PublicSubnet1 ]}]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-public-subnet-1
        - Key: SystemName
          Value: !Sub ${SystemName}
      VpcId: !Ref Vpc

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref NetworkACL

  #---------------------------------------------------------------------------
  PublicSubnet2:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ CidrConfig, Key, PublicSubnet2 ]}]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-public-subnet-2
        - Key: SystemName
          Value: !Sub ${SystemName}
      VpcId: !Ref Vpc

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref NetworkACL

  #---------------------------------------------------------------------------
  PublicSubnet3:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ CidrConfig, Key, PublicSubnet3 ]}]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-public-subnet-3
        - Key: SystemName
          Value: !Sub ${SystemName}
      VpcId: !Ref Vpc

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref NetworkACL

  #---------------------------------------------------------------------------
  ApplicationRouteTable1:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-application-rtb-1
        - Key: SystemName
          Value: !Sub ${SystemName}

  ApplicationRoute1:
    Type: AWS::EC2::Route
    Condition: EnableNatGateway
    Properties:
      RouteTableId: !Ref ApplicationRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  #---------------------------------------------------------------------------
  ApplicationSubnet1:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ CidrConfig, Key, ApplicationSubnet1 ]}]
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-application-subnet-1
        - Key: SystemName
          Value: !Sub ${SystemName}
      VpcId: !Ref Vpc

  ApplicationSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet1
      RouteTableId: !Ref ApplicationRouteTable1

  ApplicationSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet1
      NetworkAclId: !Ref NetworkACL

  #---------------------------------------------------------------------------
  ApplicationRouteTable2:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-application-rtb-2
        - Key: SystemName
          Value: !Sub ${SystemName}

  ApplicationRoute2:
    Type: AWS::EC2::Route
    Condition: EnableNatGateway
    Properties:
      RouteTableId: !Ref ApplicationRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  #---------------------------------------------------------------------------
  ApplicationSubnet2:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ CidrConfig, Key, ApplicationSubnet2 ]}]
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-application-subnet-2
        - Key: SystemName
          Value: !Sub ${SystemName}
      VpcId: !Ref Vpc

  ApplicationSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet2
      RouteTableId: !Ref ApplicationRouteTable2

  ApplicationSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet2
      NetworkAclId: !Ref NetworkACL

  #---------------------------------------------------------------------------
  ApplicationRouteTable3:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-application-rtb-3
        - Key: SystemName
          Value: !Sub ${SystemName}

  ApplicationRoute3:
    Type: AWS::EC2::Route
    Condition: EnableNatGateway
    Properties:
      RouteTableId: !Ref ApplicationRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  #---------------------------------------------------------------------------
  ApplicationSubnet3:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ CidrConfig, Key, ApplicationSubnet3 ]}]
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-application-subnet-3
        - Key: SystemName
          Value: !Sub ${SystemName}
      VpcId: !Ref Vpc

  ApplicationSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet3
      RouteTableId: !Ref ApplicationRouteTable3

  ApplicationSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet3
      NetworkAclId: !Ref NetworkACL

  #---------------------------------------------------------------------------
  DataStoreRouteTable:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-datastore-rtb
        - Key: SystemName
          Value: !Sub ${SystemName}

  #---------------------------------------------------------------------------
  DataStoreSubnet1:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ CidrConfig, Key, DataStoreSubnet1 ]}]
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-datastore-subnet-1
        - Key: SystemName
          Value: !Sub ${SystemName}
      VpcId: !Ref Vpc

  DataStoreSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DataStoreSubnet1
      RouteTableId: !Ref DataStoreRouteTable

  DataStoreSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DataStoreSubnet1
      NetworkAclId: !Ref NetworkACL

  #---------------------------------------------------------------------------
  DataStoreSubnet2:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ CidrConfig, Key, DataStoreSubnet2 ]}]
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-datastore-subnet-2
        - Key: SystemName
          Value: !Sub ${SystemName}
      VpcId: !Ref Vpc

  DataStoreSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DataStoreSubnet2
      RouteTableId: !Ref DataStoreRouteTable

  DataStoreSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DataStoreSubnet2
      NetworkAclId: !Ref NetworkACL

  #---------------------------------------------------------------------------
  DataStoreSubnet3:
  #---------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ CidrConfig, Key, DataStoreSubnet3 ]}]
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-datastore-subnet-3
        - Key: SystemName
          Value: !Sub ${SystemName}
      VpcId: !Ref Vpc

  DataStoreSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DataStoreSubnet3
      RouteTableId: !Ref DataStoreRouteTable

  DataStoreSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DataStoreSubnet3
      NetworkAclId: !Ref NetworkACL

  #------------------------------------------------------------------------------
  NatGateway:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::NatGateway
    Condition: EnableNatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-ngw
        - Key: SystemName
          Value: !Sub ${SystemName}

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: EnableNatGateway
    Properties:
      Domain: vpc

#---------------------------------------------------------------------------
Outputs:
#---------------------------------------------------------------------------
  Vpc:
    Value: !Ref Vpc
    Export:
      Name: !Sub ${SystemName}-vpc

  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${SystemName}-public-subnet-1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${SystemName}-public-subnet-2
  PublicSubnet3:
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${SystemName}-public-subnet-3

  ApplicationSubnet1:
    Value: !Ref ApplicationSubnet1
    Export:
      Name: !Sub ${SystemName}-application-subnet-1
  ApplicationSubnet2:
    Value: !Ref ApplicationSubnet2
    Export:
      Name: !Sub ${SystemName}-application-subnet-2
  ApplicationSubnet3:
    Value: !Ref ApplicationSubnet3
    Export:
      Name: !Sub ${SystemName}-application-subnet-3

  DataStoreSubnet1:
    Value: !Ref DataStoreSubnet1
    Export:
      Name: !Sub ${SystemName}-datastore-subnet-1
  DataStoreSubnet2:
    Value: !Ref DataStoreSubnet2
    Export:
      Name: !Sub ${SystemName}-datastore-subnet-2
  DataStoreSubnet3:
    Value: !Ref DataStoreSubnet3
    Export:
      Name: !Sub ${SystemName}-datastore-subnet-3

  PublicRouteTable:
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${SystemName}-public-rtb
  ApplicationRouteTable1:
    Value: !Ref ApplicationRouteTable1
    Export:
      Name: !Sub ${SystemName}-application-rtb-1
  ApplicationRouteTable2:
    Value: !Ref ApplicationRouteTable2
    Export:
      Name: !Sub ${SystemName}-application-rtb-2
  ApplicationRouteTable3:
    Value: !Ref ApplicationRouteTable3
    Export:
      Name: !Sub ${SystemName}-application-rtb-3
  DataStoreRouteTable:
    Value: !Ref DataStoreRouteTable
    Export:
      Name: !Sub ${SystemName}-datastore-rtb
